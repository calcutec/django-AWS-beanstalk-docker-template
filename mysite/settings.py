"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import getpass
import json
from django.core.exceptions import ImproperlyConfigured

INTERNAL_IPS = ['127.0.0.1',]

DEVELOPMENT_MODE = ((getpass.getuser() == 'kevin') or \
                            (getpass.getuser() == 'sakura') or \
                            (getpass.getuser() == 'laptop'))

if DEVELOPMENT_MODE:
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True
    DEBUG_TOOLBAR_PATCH_SETTINGS = False
    PREPEND_WWW = False
    EMAIL_HOST = 'localhost'
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' 
    DEFAULT_FROM_EMAIL = 'kevin@rustybear.com'
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    EMAIL_USE_TLS = False 
    EMAIL_PORT = 1025
    ALLOWED_HOSTS = ['*']
else:
    # If DEBUG = False, ALLOWED_HOSTS must be set.
    DEBUG = False
    ALLOWED_HOSTS = ['.rustybear.com',
                     'xxxxx-test-env.us-east-1.elasticbeanstalk.com',
                     'xxxxx-prod-env.us-east-1.elasticbeanstalk.com',
                     '127.0.0.1',
                     'localhost',
                     '52.186.44.146'
                    ]

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRETS_FILE = os.path.join(BASE_DIR, "..", "secrets.json")

with open(SECRETS_FILE) as f:
    secrets = json.loads(f.read())

def get_secret(setting,secrets=secrets):
    """ Get the secret variables or return explicit exception."""
    try:
        return secrets[setting]
    except KeyError:
        error_msg = "Set the {0} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)

AWS_STORAGE_BUCKET_NAME = get_secret("AWS_STORAGE_BUCKET_NAME")
AWS_ACCESS_KEY_ID = get_secret("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = get_secret("AWS_SECRET_ACCESS_KEY")
SECRET_KEY = get_secret("DJANGO_SECRET_KEY")
AWS_CLOUDFRONT_DOMAIN = 'd35mv7jq3bmmwx.cloudfront.net'
AWS_PRELOAD_METADATA = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = '+tb*r29ojm&cd4t!q*=&62q-n$9@lid!ct5xf-vq=n8o#q(s-l'

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True

#ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEVELOPMENT_MODE:
    INSTALLED_APPS += [
        'debug_toolbar',
    ]
    MIDDLEWARE_CLASSES += [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]


ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/New_York'                                                                                                                                               
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/


#STATIC_ROOT = os.path.join(BASE_DIR, "..", "www", "static")                                                                                                                 
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)                                                                                                                       
                                                                                                                                                                               
# Tell django-storages that when coming up with the URL for an item in S3 storage, keep                                                                                      
# it simple - just use this domain plus the path. (If this isn't set, things get complicated).                                                                               
# This controls how the `static` template tag from `staticfiles` gets expanded, if you're using it.                                                                          
# We also use it in the next setting.                                                                                                                                        
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME                                                                                                       
                                                                                                                                                                               
# This is used by the `static` template tag from `static`, if you're using that. Or if anything else                                                                         
# refers directly to STATIC_URL. So it's safest to always set it.                                                                                                            
##STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN                                                                                                                          
##STATIC_URL = '/static/'
STATICFILES_LOCATION = 'static'                                                                                                                                              
STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)                                                                                                 
                                                                                                                                                                               
# Tell the staticfiles app to use S3Boto storage when writing the collected static files (when                                                                               
# you run `collectstatic`).                                                                                                                                                  
##STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'                                                                                                             
##STATICFILES_STORAGE = (os.path.join(BASE_DIR, 'config.custom_storages.StaticStorage'))                                                                                      
STATICFILES_STORAGE = 'custom_storages.StaticStorage'                                                                                                                        
                                                                                                                                                                               
MEDIAFILES_LOCATION = 'media'                                                                                                                                                
MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)                                                                                                   
DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'


